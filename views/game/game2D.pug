extends ../layout

block content
	h1 2D Gameplay
	.boards
		-var grid = 8;
		-var size = 50;
		.board-container(id="position-board")
			each x in [0, 1, 2, 3, 4, 5, 6, 7]
				each y in [0, 1, 2, 3, 4, 5, 6, 7]
					.grid-cell-clear(style="top:"+y*size +"px;left:"+x*size + "px")
			.boat(id="boat2")
			.boat(id="boat3")
			.boat(id="boat4")
			.boat(id="boat5")
		
		.board-container(id="attack-board")
			each x in [0, 1, 2, 3, 4, 5, 6, 7]
				each y in [0, 1, 2, 3, 4, 5, 6, 7]
					.grid-cell-clear(id=x*8+y style="top:"+y*size +"px;left:"+x*size + "px" onclick="socket.sendMakeMove("+y+"," + x +")")

	h3 Gameplay Dev Console
	.row.form-group
		label.col-sm-2 Ready Up
		button.btn.col-sm-6(type="button",onclick='sendLocations()') Position Ships / Ready Up
	.row.form-group
		label.col-sm-2 Invite Friend
		select.form-select.col-sm-4(id="friend_list")
			option(disabled selected) Select Friend to Invite
			each friend in friendsList
				option(value=friend.username) #{friend.displayName}
		button.btn.col-sm-2(type="button", onclick='socket.sendGameInvite()') Send Invite
	.row.form-group
		label.col-sm-2 Get Friends
		button.btn.col-sm-6(type="button",onclick='socket.sendGetFriends()') Get Friends List
	.row.form-group
		label.col-sm-2 Basic Mode
		button.btn.col-sm-6(type="button",onclick='socket.sendBasicMode()') Basic Game Mode
	.row.form-group
		label.col-sm-2 Join Game
		select.form-select.col-sm-4(id="game_id")
			option(disabled selected) Select Game to Join
			each friend in friendsList
				option(value=friend.username) #{friend.displayName}
		button.btn.col-sm-2(type="button", onclick='socket.sendJoinGame()') Join Game
	.row.form-group
		label.col-sm-2 New Game
		button.btn.col-sm-6(type="button",onclick='socket.sendNewGame()') Create New Game
	


	link(rel='stylesheet',type="text/css", href='/css/game2D.css')
	script(src="/lib/TweenMax.min.js")
	script(src="/lib/Draggable.min.js")
	script(src="/js/GameVisuals2D.js")
	script(src="/js/GameSocket.js")

	script.
		const socket = new GameSocket("#{user.username}");

		const snap = 50;
		const ships = [boat2, boat3, boat4, boat5];

		for (let i = 0; i < ships.length; i++) {
			const ship = ships[i];
			Draggable.create(ship, {
				bounds: $("#position-board"),
				onDrag: onDrag,
				onClick: rotateShip
			});
		}

		function rotateShip() {
			var oldwidth = $(this.target).css("width");
			var oldheight = $(this.target).css("height");
			$(this.target).css("height", oldwidth);
			$(this.target).css("width", oldheight);
		}
		function onDrag() {
			TweenLite.to(this.target, 0.5, {
				x: Math.round(this.x / snap) * snap,
				y: Math.round(this.y / snap) * snap,
				ease: Back.easeOut.config(2)
			});
		}
		function coordsToShip(x, y, size) {
			const obj = {c: x, r: y};
			if (size === 2) {
				obj.t = "P";
			} else if (size === 3) {
				obj.t = "S";
			} else if (size === 4) {
				obj.t = "B";
			} else if (size === 5) {
				obj.t = "C";
			} else {
				throw new Error(`Invalid Ship Size: ${size}`);
			}
			return obj;
		}
		function sendLocations() {
			const list = [];

			for (let i = 0; i < ships.length; i++) {
				const ship = ships[i];
				var element = ship.style.cssText;
				const splitText = element.split("translate3d(");
				const vals = splitText[1].split(", ");

				if (ship.style.height.split("p")[0] === '') {
					var height = $(ship).css("height").split("p")[0];
					var width = $(ship).css("width").split("p")[0];
				}
				else {
					var height = ship.style.height.split("p")[0];
					var width = ship.style.width.split("p")[0];
				}
				const x = Math.round(vals[0].split("p")[0] / 50);
				const y = Math.round(vals[1].split("p")[0] / 50);
				let length;
				if (width == 50) {
					length = height / 50;
					list.push(coordsToShip(x, y+length-1, length));
				}
				else {
					length = width / 50;
					list.push(coordsToShip(x+length-1, y, length));
				}
				list.push(coordsToShip(x, y, length));
				Draggable.get(ship).disable();
			}
		
			socket.sendShipPositions(list);
		}

